{"version":3,"sources":["logo.svg","SortingVisual/SortingAlgorithms.js","SortingVisual/SortingVisual.jsx","App.js","reportWebVitals.js","index.js"],"names":["swap","arr","i","j","temp","getSelectionAnimations","animations","length","N","minIndex","push","selectionSort","PRIMARY_COLOR","END_COLOR","SortingVisual","props","state","array","this","createArray","getRandomInt","setState","javaScriptSort","slice","sort","a","b","sortedArray","console","log","array1","array2","equalArrays","arrayBars","document","getElementsByClassName","color","min_color","comparisonIndex","comparisonStyle","style","minIndexStyle","setTimeout","backgroundColor","barIndex","newHeight","color_change","barStyle","height","className","map","value","idx","id","onClick","React","Component","min","max","Math","ceil","floor","random","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2e9758d5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export function swap(arr, i, j){\r\n    var temp = arr[i];\r\n    arr[i] = arr[j];\r\n    arr[j] = temp;\r\n}\r\n\r\nexport function getSelectionAnimations(arr) {\r\n  const animations = [];\r\n\r\n  if (arr.length <= 1) return [arr, animations];\r\n  selectionSort(arr, animations);\r\n\r\n  return [arr, animations];\r\n}\r\n\r\nfunction selectionSort(arr, animations) {\r\n    const N = arr.length;\r\n    for (let i = 0; i < N - 1; i++) {\r\n        let minIndex = i; \r\n        for (let j = i + 1; j < N; j++) {\r\n            animations.push([\"comp\", j, minIndex]);\r\n            animations.push([\"comp_reset\", j, minIndex]);\r\n            if (arr[j] < arr[minIndex]) {\r\n                // animations.push([\"setMin\", minIndex, j]); // prevMinIndex, minIndex\r\n                minIndex = j;\r\n            }\r\n        }\r\n        animations.push([\"swap\", minIndex, arr[i], false]);\r\n        animations.push([\"swap\", i, arr[minIndex], true]);\r\n        swap(arr, minIndex, i);\r\n    }\r\n}\r\n\r\n\r\nfunction insertionSort(){\r\n    return 0;\r\n}\r\n\r\nfunction mergeSort(){\r\n    return 0;\r\n}","import React from 'react';\r\nimport './SortingVisual.css';\r\nimport {getSelectionAnimations} from './SortingAlgorithms';\r\n\r\nconst total_numbers = 80\r\n\r\nconst PRIMARY_COLOR = \"blue\";\r\nconst SECONDARY_COLOR = \"red\";\r\nconst END_COLOR = \"green\";\r\n\r\nconst MIN_COLOR = \"yellow\";\r\nconst Jcol = \"red\";\r\nconst WALL = \"black\";\r\nconst OK = \"green\";\r\nconst ANIMATION_SPEED_MS = 1;\r\n\r\nexport default class SortingVisual extends React.Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\t\r\n\t\tthis.state = {\r\n\t\t\tarray: [],\r\n\t\t};\r\n\t}\r\n\t\r\n\t/**create array as soon as component is created**/\r\n\tcomponentDidMount(){\r\n\t\tthis.createArray();\r\n\t}\r\n\t\r\n\t/** Iterate and generate an array with 50 random numbers from 50 to 5000 **/\r\n\tcreateArray() {\r\n\t\tconst array = [];\r\n\t\tfor (let i=0; i<total_numbers; i++) {\r\n\t\t\tarray.push(getRandomInt(10,500));\r\n\t\t}\r\n\t\tthis.setState({array});\r\n\t\t// this.render()\r\n\t}\r\n\r\n\r\n\t\r\n    selectionSort() {\r\n\t\t// this.disableButtons();\r\n        const javaScriptSort = this.state.array.slice().sort((a, b) => a - b);\r\n\t\tconst [sortedArray, animations] = getSelectionAnimations(this.state.array);\r\n\t\tconsole.log(\"Correct sorting? \",equalArrays(sortedArray, javaScriptSort));\t  \r\n\t\tconst arrayBars = document.getElementsByClassName('array-bar');\r\n        for (let i = 0; i < animations.length; i++) {\r\n            // const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\r\n            const isColorChange = (animations[i][0] === \"comp\") || (animations[i][0] === \"comp_reset\") ;\r\n            if(isColorChange === true) {\r\n                const color = (animations[i][0] === \"comp\") ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                const min_color = (animations[i][0] === \"comp\") ? MIN_COLOR : PRIMARY_COLOR;\r\n\t\t\t\tconst [, comparisonIndex, minIndex] = animations[i];\r\n                const comparisonStyle = arrayBars[comparisonIndex].style;\r\n                const minIndexStyle = arrayBars[minIndex].style;\r\n                // if (curMinIdx !== minIndex){\r\n\t\t\t\t// \tsetTimeout(() => {\r\n\t\t\t\t// \t\tarrayBars[curMinIdx].style.backgroundColor = PRIMARY_COLOR;\r\n\t\t\t\t// \t\tcurMinIdx = minIndex;\r\n\t\t\t\t// \t\tarrayBars[curMinIdx].style.backgroundColor = MIN_COLOR;\r\n\t\t\t\t// \t},i * ANIMATION_SPEED_MS);\t\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tsetTimeout(() => {\r\n                    minIndexStyle.backgroundColor = min_color;\r\n                    comparisonStyle.backgroundColor = color;\r\n                },i * ANIMATION_SPEED_MS);\t\t\t\t\r\n\t\t\t\t// setTimeout(() => {\r\n                //     minIndexStyle.backgroundColor = PRIMARY_COLOR;\r\n\t\t\t\t// \tcomparisonStyle.backgroundColor = PRIMARY_COLOR;\r\n                // },i * ANIMATION_SPEED_MS);\t\t\t\t\r\n\t\t\t}\r\n\r\n\t\t\telse { // if animation[i][0] === \"swap\"\r\n                const [, barIndex, newHeight, color_change] = animations[i];\r\n                const barStyle = arrayBars[barIndex].style;\r\n\t\t\t\tsetTimeout(() => {\r\n                    barStyle.height = `${newHeight}px`;\r\n\t\t\t\t\tif (color_change) {barStyle.backgroundColor = END_COLOR;}\r\n\t\t\t\t\t// if (color_change && barIndex>0){arrayBars[barIndex-1].style.backgroundColor = PRIMARY_COLOR;}\r\n                },i* ANIMATION_SPEED_MS);  \r\n            }\r\n        }\r\n\t\tsetTimeout(() => {\r\n\t\t\t{arrayBars[arrayBars.length-1].style.backgroundColor = END_COLOR;}\r\n\t\t},animations.length* ANIMATION_SPEED_MS);  \r\n\r\n        // this.setState({array: sortedArray})\r\n\t\t// this.restoreButtons();\r\n\t\tsetTimeout(() => {\r\n\t\t\tfor (let i=0; i<arrayBars.length; i++){arrayBars[i].style.backgroundColor = PRIMARY_COLOR; } \r\n\t\t},animations.length * ANIMATION_SPEED_MS+1000);  \r\n\t\t\r\n    }\r\n\t\r\n\r\n\t// disableButtons() {\r\n\t// \tdocument.getElementById(\"selectionSort\").disabled = true;\r\n\t// \tlet buttonStyle = document.getElementById(\"selectionSort\").style;\r\n\t// \tbuttonStyle.cursor = \"default\";\r\n\t// \tbuttonStyle.background = \"#000000\";\r\n\t\r\n\t// \tdocument.getElementById(\"newArray\").disabled = true;\r\n\t// \tbuttonStyle = document.getElementById(\"newArray\").style;\r\n\t// \tbuttonStyle.cursor = \"default\";\r\n\t// \tbuttonStyle.background = \"#000000\";\r\n\t// }\r\n\t\r\n\t// restoreButtons() {\r\n\t// \tdocument.getElementById(\"selectionSort\").disabled = false;\r\n\t// \tlet buttonStyle = document.getElementById(\"selectionSort\").style;\r\n\t// \tbuttonStyle.background = \"#47535E\";\r\n\t// \tbuttonStyle.cursor = \"pointer\";\r\n\t\r\n\t// \tdocument.getElementById(\"newArray\").disabled = false;\r\n\t// \tbuttonStyle = document.getElementById(\"newArray\").style;\r\n\t// \tbuttonStyle.background = \"#47535E\";\r\n\t// \tbuttonStyle.cursor = \"pointer\";\r\n\t// }\r\n\r\n\t/** render array into array-bar class elements **/\r\n\trender() {\r\n\t\tconst {array} = this.state;\r\n\t\t\r\n\t\treturn (\r\n\t\t<div className=\"array-container\">\r\n\t\t{array.map((value,idx) => (\r\n\t\t\t<div className = \"array-bar\" \r\n\t\t\tkey={idx}\r\n\t\t\tstyle={{height: `${value}px`}}\r\n\t\t>{value}</div>\r\n\t\t))}\r\n\r\n\t\t<button id = \"newArray\" onClick= {() => this.createArray()}>Generate New Array</button>\r\n\t\t<button id = \"selectionSort\" onClick= {() => this.selectionSort()}>Selection Sort</button>\r\n\t\t{/* <button onClick= {() => this.insertionSort()}>Insertion Sort</button> */}\r\n\t\t{/* <button onClick= {() => this.mergeSort()}>Merge Sort</button> */}\r\n\r\n\t\t</div>\r\n\t\t\r\n\t\t);\r\n\t}\t\t\r\n}\t\r\n\r\nfunction equalArrays(array1, array2) { \r\n\tif (array1.length!== array2.length) return false; \r\n\tfor (let i=0; i<array1.length;i++){ \r\n\t\tif (array1[i]!==array2[i]){\r\n\t\t\treturn false \r\n\t\t} \r\n\t} \r\n\treturn true \r\n}\r\n\r\n/** From https://stackoverflow.com/questions/1527803/generating-random-whole-numbers-in-javascript-in-a-specific-range\r\n**/\r\n\r\n /**\r\n * Returns a random integer between min (inclusive) and max (inclusive).\r\n * The value is no lower than min (or the next integer greater than min\r\n * if min isn't an integer) and no greater than max (or the next integer\r\n * lower than max if max isn't an integer).\r\n * Using Math.round() will give you a non-uniform distribution!\r\n */\r\nfunction getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n","import logo from './logo.svg';\r\nimport './App.css';\r\nimport SortingVisual from './SortingVisual/SortingVisual';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n\t<SortingVisual></SortingVisual>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}